require "matrix"
require "~/dev/sonic-pi-projects/serialisms/modules.rb"


use_bpm 240
use_synth :piano

sixteen = 0.25
two16 = 0.5
seven16 = 1.75
eight16 = 2

measures = [[60, 64, 67, 72, 76],
            [60, 62, 69, 74, 77],
            [59, 62, 67, 74, 77],
            [60, 64, 67, 72, 76],
            [60, 64, 69, 76, 81],
            [60, 62, 66, 69, 74],
            [59, 62, 67, 74, 79],
            [59, 60, 64, 67, 72],
            [57, 60, 64, 67, 72],
            [50, 57, 62, 66, 72],
            [55, 59, 62, 67, 71],
            [55, 58, 64, 67, 73],
            [53, 57, 62, 69, 74],
            [53, 56, 62, 65, 71],
            [52, 55, 60, 67, 72],
            [52, 53, 57, 60, 65],
            [50, 53, 57, 60, 65],
            [43, 50, 55, 59, 65],
            [48, 52, 55, 60, 64],
            [48, 55, 58, 60, 64],
            [41, 53, 57, 60, 64],
            [42, 48, 57, 60, 63],
            [44, 53, 59, 60, 62],
            [43, 53, 55, 59, 62],
            [43, 52, 55, 60, 64],
            [43, 50, 55, 60, 65],
            [43, 50, 55, 59, 65],
            [43, 51, 57, 60, 66],
            [43, 52, 55, 60, 67],
            [43, 50, 55, 60, 65],
            [43, 50, 55, 59, 65],
            [36, 48, 55, 58, 64]]

x = []
y = []

measures.each do |m|
    generate_matrix(m).each do |n|
        x += n
    end
end

prime = Matrix.rows(x.each_slice(5).to_a)
inversion = Matrix.columns(x.each_slice(5).to_a)
retrograde = Matrix.rows(x.each_slice(5).to_a.reverse)
retrograde_inversion = Matrix.columns(x.each_slice(5).to_a.reverse)

prime.each do |n|
    y << n
end

prime.each do |x|
    play x
    sleep 0.5
end

# prime.each do |chord|
#     2.times do
#         in_thread do
#         play chord.at(0), decay: 0.25
#         end
#         in_thread do
#         sleep sixteen
#         play chord.at(1), decay: 0.75
#         sleep seven16
#         end
#         sleep two16
#         2.times do
#         chord[2..4].each do |note|
#             play note, decay: 0.75
#             sleep sixteen
#         end
#         end
#     end
# end
